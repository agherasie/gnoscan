version: 2.1

orbs:
  node: circleci/node@5.0.3
  slack: circleci/slack@4.12.0
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0

commands:
  init-develop:
    steps:
      - run:
          name: Setup Environment
          when: always
          command: |
            SERVICE_NAME='gnoscan-front'
            DOCKER_TAG=$(date "+%Y%m%d%H%M%S")
            BRANCH_NAME='develop'
            PORT='4000'
            echo "export SERVICE_NAME='${SERVICE_NAME}'" >> $BASH_ENV
            echo "export DOCKER_TAG='${DOCKER_TAG}'" >> $BASH_ENV
            echo "export BRANCH_NAME='${BRANCH_NAME}'" >> $BASH_ENV
            echo "export PORT='${PORT}'" >> $BASH_ENV
            source $BASH_ENV
  init-slack:
    steps:
      - run:
          name: Setup Message Info
          when: always
          command: |
            SLACK_TEMPLATE_BUILD_START=$(cat .circleci/template/slack-build-start.json)
            SLACK_TEMPLATE_BUILD_FINISH=$(cat .circleci/template/slack-build-finish.json)
            SLACK_TEMPLATE_BUILD_FAIL=$(cat .circleci/template/slack-build-fail.json)
            SLACK_TEMPLATE_DEPLOY_SUCCESS=$(cat .circleci/template/slack-deploy-success.json)
            SLACK_TEMPLATE_DEPLOY_FAIL=$(cat .circleci/template/slack-deploy-fail.json)
            echo "export SLACK_TEMPLATE_BUILD_START='${SLACK_TEMPLATE_BUILD_START}'" >> $BASH_ENV
            echo "export SLACK_TEMPLATE_BUILD_FINISH='${SLACK_TEMPLATE_BUILD_FINISH}'" >> $BASH_ENV
            echo "export SLACK_TEMPLATE_BUILD_FAIL='${SLACK_TEMPLATE_BUILD_FAIL}'" >> $BASH_ENV
            echo "export SLACK_TEMPLATE_DEPLOY_SUCCESS='${SLACK_TEMPLATE_DEPLOY_SUCCESS}'" >> $BASH_ENV
            echo "export SLACK_TEMPLATE_DEPLOY_FAIL='${SLACK_TEMPLATE_DEPLOY_FAIL}'" >> $BASH_ENV
            source $BASH_ENV
  notification-build-start:
    steps:
      - slack/notify:
          channel: 'C04GFMSFVT4'
          event: always
          template: SLACK_TEMPLATE_BUILD_START
  notification-build-finish:
    steps:
      - slack/notify:
          channel: 'C04GFMSFVT4'
          event: pass
          template: SLACK_TEMPLATE_BUILD_FINISH
  notification-build-fail:
    steps:
      - slack/notify:
          channel: 'C04GFMSFVT4'
          event: fail
          template: SLACK_TEMPLATE_BUILD_FAIL
  notification-deploy-success:
    steps:
      - slack/notify:
          channel: 'C04GFMSFVT4'
          event: pass
          template: SLACK_TEMPLATE_DEPLOY_SUCCESS
  notification-deploy-fail:
    steps:
      - slack/notify:
          channel: 'C04GFMSFVT4'
          event: fail
          template: SLACK_TEMPLATE_DEPLOY_FAIL

jobs:
  build:
    docker:
      - image: cimg/base:stable
        environment:
          TZ: 'Asia/Seoul'
    steps:
      - checkout
      - init-slack
      - notification-build-start

  deploy-develop:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    steps:
      - checkout
      - init-develop
      - aws-ecr/build-and-push-image:
          repo: '${SERVICE_NAME}'
          tag: 'latest,${DOCKER_TAG}'
      - run:
          name: Deploy Over SSH
          command: |
            ssh ubuntu@3.218.133.250 "./circle-ci-deploy.sh ${SERVICE_NAME} ${DOCKER_TAG} ${BRANCH_NAME} ${PORT}"
      - init-slack
      - notification-deploy-success
      - notification-deploy-fail

workflows:
  build-and-deploy:
    jobs:
      - build:
          context:
            - SLACK_GNOSCAN
          filters:
            branches:
              only:
                - main
                - qa
                - develop
      - deploy-develop:
          context:
            - AWS_DEPLOY
            - SLACK_GNOSCAN
          requires:
            - build
          filters:
            branches:
              only:
                - develop
